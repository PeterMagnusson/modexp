package org.crypttech.modexp.testgenerator.format;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import org.crypttech.modexp.testgenerator.TestVector;

public class GeneratorVerilog extends ModExpTestFormater {
	private BufferedReader br;
	private List<String> taskCalls = new ArrayList<String>();
	private boolean headerEmitted = false;

	public GeneratorVerilog(String templateFile, String destinationFile)
			throws FileNotFoundException {
		super(new PrintWriter(destinationFile), true);
		this.br = new BufferedReader(new InputStreamReader(new FileInputStream(
				templateFile)));

	}

	@Override
	public void format(TestVector testVector) {
		emitHeader();

		String testname = ("autogenerated_" + testVector.generator + "_" + testVector.seed)
				.replace("-", "M");
		taskCalls.add(testname + "();");

		out("task " + testname + "();");
		out("reg [31 : 0] read_data;");
		out("begin");
		out("tc_ctr = tc_ctr + 1;");
		out("$display(\"" + testname + "\");");

		for (int i = 0; i < testVector.X.length; i++)
			out("write_word({MESSAGE_PREFIX, 8'h%02x}, 32'h%08x);", i,
					testVector.X[i]);

		for (int i = 0; i < testVector.E.length; i++)
			out("write_word({EXPONENT_PREFIX, 8'h%02x}, 32'h%08x);", i,
					testVector.E[i]);

		out("write_word({GENERAL_PREFIX, ADDR_EXPONENT_LENGTH}, 32'h%08x););",
				testVector.E.length);

		for (int i = 0; i < testVector.M.length; i++)
			out("write_word({MODULUS_PREFIX, 8'h%02x}, 32'h%08x);", i,
					testVector.M[i]);

		out("write_word({GENERAL_PREFIX, ADDR_MODULUS_LENGTH}, 32'h%08x););",
				testVector.E.length);

		out("dump_memories()");

		out("write_word({GENERAL_PREFIX, ADDR_CTRL}, 32'h%08x);",
				testVector.length);
		out("wait_ready();");

		for (int i = 0; i < testVector.expected.length; i++) {
			out("read_word({RESULT_PREFIX,8'h%02x});", i);
			out("read_data = tb_read_data;");
			out("if (read_data !== 32'h%08x))", testVector.expected[i]);
			out("  begin");
			out("    $display(\"Expected: 0x%08x, got 0x%%08x\", read_data);",
					testVector.expected[i]);
			out("  end");
		}
		out("end");
		out("endtask // " + testname);

	}

	@Override
	public void close() throws Exception {
		emitMiddle();
		for (String taskCall : taskCalls)
			out(taskCall);
		emitFinal();
		if (br != null)
			br.close();
		super.close();
	}

	private void emitHeader() {
		if (headerEmitted == true)
			return;
		headerEmitted = true;
		String terminatingLine = "===TEMPLATE_HEADER_END===";
		emitTemplateSection(terminatingLine);
	}

	private void emitMiddle() {
		String terminatingLine = "===TEMPLATE_CALL_TASKS===";
		emitTemplateSection(terminatingLine);
	}

	private void emitFinal() {
		String terminatingLine = "Never gonna give you up, never gonna let you down";
		emitTemplateSection(terminatingLine);
	}

	private void emitTemplateSection(String terminatingLine) {
		String line;
		try {
			while ((line = br.readLine()) != null) {
				if (line.contains(terminatingLine))
					return;
				out(line);
			}
		} catch (IOException e) {
			throw new RuntimeException(e);
		} finally {
		}
	}

}
